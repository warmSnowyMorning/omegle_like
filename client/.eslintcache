[{"/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/index.js":"1","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/App.js":"2","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/context/SocketContext.js":"3","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/Dashboard.js":"4","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/Chat.js":"5","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/RoomsList.js":"6","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/RoomsListItem.js":"7","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/MessagesList.js":"8","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/MessagesListItem.js":"9","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/utils/generateChatUrl.js":"10","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/TypersList.js":"11","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/TypersListItem.js":"12"},{"size":141,"mtime":1608428196970,"results":"13","hashOfConfig":"14"},{"size":918,"mtime":1608593492800,"results":"15","hashOfConfig":"14"},{"size":63,"mtime":1608428185430,"results":"16","hashOfConfig":"14"},{"size":2197,"mtime":1608657277300,"results":"17","hashOfConfig":"14"},{"size":4877,"mtime":1608840191040,"results":"18","hashOfConfig":"14"},{"size":288,"mtime":1608657432280,"results":"19","hashOfConfig":"14"},{"size":1037,"mtime":1608840095730,"results":"20","hashOfConfig":"14"},{"size":1852,"mtime":1608840582840,"results":"21","hashOfConfig":"14"},{"size":640,"mtime":1608840220060,"results":"22","hashOfConfig":"14"},{"size":91,"mtime":1608581868970,"results":"23","hashOfConfig":"14"},{"size":446,"mtime":1608765349330,"results":"24","hashOfConfig":"14"},{"size":207,"mtime":1608680584040,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"gh0feg",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/index.js",[],["59","60"],"/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/App.js",["61"],"import React, { useEffect, useState } from 'react'\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Dashboard from './components/Dashboard'\nimport io from 'socket.io-client'\nimport SocketContext from './context/SocketContext'\nimport Chat from './components/Chat'\n\n\nexport default () => {\n  const [mySocket, set_mySocket] = useState(null)\n  useEffect(() => {\n    const socket = io('http://localhost:5000', { transports: ['websocket'] });\n    socket.on('connect', () => {\n      setTimeout(() => {\n        set_mySocket(socket)\n      }, 500);\n    })\n\n  }, [])\n\n  return (\n    <div>\n      {mySocket ? (\n        <Router>\n          <SocketContext.Provider value={mySocket}>\n            <Route path=\"/\" exact component={Dashboard} />\n            <Route path=\"/chat\" exact component={Chat} />\n          </SocketContext.Provider>\n\n        </Router>\n      ) :\n        (<h1>Loading</h1>)}\n    </div>\n  )\n}","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/context/SocketContext.js",[],"/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/Dashboard.js",["62","63"],"import React, { useContext, useEffect, useState } from 'react';\n// import { Link } from 'react-router-dom';\nimport SocketContext from '../context/SocketContext';\nimport RoomsList from './RoomsList';\nimport { v4 as uuid } from 'uuid'\nimport generateChatUrl from '../utils/generateChatUrl';\nimport produce from 'immer'\n\nconst Dashboard = (props) => {\n  const { history } = props\n  const mySocket = useContext(SocketContext)\n  const [roomName, set_roomName] = useState('')\n  const [topic, set_topic] = useState('')\n  const [capacity, set_capacity] = useState('')\n  const [rooms, set_rooms] = useState([])\n\n\n\n  useEffect(() => {\n    mySocket.on('updateRoomsList', ({ rooms: newRooms }) => {\n      console.log('some update')\n      console.log(rooms, 'rooms state')\n      set_rooms(Object.entries(newRooms))\n    })\n\n    mySocket.emit('getRooms', (err, { rooms: allRooms }) => {\n      if (err) return console.log(err)\n      console.log(allRooms, err)\n      set_rooms(Object.entries(allRooms))\n    })\n\n    return () => {\n      mySocket.removeAllListeners()\n    }\n  }, [])\n\n  const handleRoomCreate = (e) => {\n    e.preventDefault()\n    // console.log(props.history.push('/chat'))\n    // handleRoomCreate\n    const roomId = uuid()\n    mySocket.emit('createRoom', {\n      roomName,\n      roomId,\n      topic,\n      capacity: parseInt(capacity, 10)\n    }, (err, { anonId }) => {\n      if (err) return console.log('error')\n      console.log('success')\n\n      history.push(generateChatUrl(mySocket.id, roomId, anonId))\n    })\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleRoomCreate}>\n        <h1>Create a new room!!!</h1>\n        <label>\n          Room Name\n        <input type='text' value={roomName} onChange={(e) => set_roomName(e.target.value)} />\n        </label>\n        <label>\n          Topic\n        <input type='text' value={topic} onChange={(e) => set_topic(e.target.value)} />\n        </label>\n        <label>\n          max capacityu\n        <input type='number' value={capacity} onChange={(e) => set_capacity(e.target.value)} />\n        </label>\n        <button type='submit'>Create!</button>\n      </form>\n      <RoomsList rooms={rooms} />\n\n\n    </div>\n  );\n}\n\nexport default Dashboard;\n","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/Chat.js",["64","65","66","67","68"],"import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { withRouter } from 'react-router-dom'\nimport SocketContext from '../context/SocketContext';\nimport MessagesList from './MessagesList';\nimport queryString from 'query-string'\nimport TypersList from './TypersList';\n\nconst Chat = (props) => {\n  const { history, location } = props\n  const mySocket = useContext(SocketContext)\n  const [messages, set_messages] = useState([])\n  const [message, set_message] = useState('')\n  const [users, set_users] = useState([])\n  const typingRef = useRef(false)\n  const timeoutRef = useRef(null)\n\n  // 0 means for everyone\n  const [messageTarget, set_messageTarget] = useState(0)\n\n  useEffect(() => {\n    const { host, room: roomId, anon: anonId } = queryString.parse(location.search)\n\n    mySocket.on('leaveRoom', (data) => {\n      console.log(data)\n      history.push('/')\n      console.log('LEAVEROOM EVERYONE')\n    })\n    // mySocket.on('someoneLeft', (data) => {\n    //   console.log(`user with the id of ${data.anonId} just left!`)\n    // })\n    // mySocket.on('sucessUserJoin', (data) => {\n    //   console.log(data.anonId, ' has just joined your room!!!')\n    // })\n    mySocket.on('addMessage', ({ message: newMessage }) => {\n      console.log(newMessage, 'addmessage new messagw')\n      const { type, message, userId: user, anonId } = newMessage\n      if (type === 'ADMIN') {\n        const userObj = {\n          anonId,\n          user,\n          typing: false\n        }\n        if (message.includes('connected')) {\n          set_users((prevUsers) => prevUsers.concat(userObj))\n        } else if (message.includes('left')) {\n          set_messageTarget((prevMsgTarget) => {\n            return prevMsgTarget == userObj.anonId ? 0 : prevMsgTarget\n          })\n          set_users((prevUsers) => prevUsers.filter(({ anonId: someAnonId }) => someAnonId !== userObj.anonId))\n        }\n      }\n\n      set_messages(prevMessages => prevMessages.concat(newMessage))\n    })\n\n    mySocket.on('toggleUser', ({ users }) => {\n      console.log('togglingUserTyping', users)\n      set_users(users)\n    })\n\n    mySocket.emit('validateMe', { host }, (err, data) => {\n      console.log('validateMe Event')\n      if (err) return history.push('/')\n      const { roomInfo: { messages: allMessages, users } } = data\n      console.log(users)\n      set_users(users)\n      set_messages(allMessages)\n    })\n\n    return () => mySocket.removeAllListeners()\n  }, [])\n\n  //enter typing mode; it doesn't end for 500 milliseconds unless it has already ended.  only way it can end b4 the timer is if the user explicitly submits.\n  const sendNewMessage = (e) => {\n    const { host, room: roomId, anon: anonId } = queryString.parse(location.search)\n    const toggleTypingPayload = { host, userId: mySocket.id, roomId }\n    const newMessagePayload = { anonId, roomId, message, timestamp: new Date().valueOf(), host }\n\n    if (parseInt(messageTarget, 10) > 0) {\n      const targetUser = users.filter(({ anonId: someAnonId }) => someAnonId == messageTarget)[0]\n      // delete targetUser\n      delete targetUser.targetUser\n      console.log(targetUser, 'messageTargetThingie')\n\n      toggleTypingPayload['targetUser'] = targetUser\n      newMessagePayload['targetUser'] = targetUser\n    }\n\n    // e.preventDefault()\n    clearTimeout(timeoutRef.current)\n    if (!typingRef.current && e.key !== 'Enter') {\n      mySocket.emit('toggleTyping', toggleTypingPayload)\n      typingRef.current = true\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      if (typingRef.current) {\n        mySocket.emit('toggleTyping', toggleTypingPayload)\n        typingRef.current = false\n        timeoutRef.current = null\n      }\n    }, 500)\n\n    if (e.key === 'Enter') {\n      //toggle typing off here\n      mySocket.emit('newMessage', newMessagePayload, (err, data) => {\n        if (err) return console.log(err)\n        set_message('')\n      })\n\n      if (typingRef.current) {\n        mySocket.emit('toggleTyping', toggleTypingPayload)\n        typingRef.current = false\n        timeoutRef.current = null\n      }\n    }\n  }\n\n  const handleMessageTargetChange = (e) => {\n    console.log(typeof e.target.value)\n    set_messageTarget(e.target.value)\n  }\n  return (\n    <div>\n      <MessagesList messages={messages} />\n      <TypersList users={users} />\n\n      <select value={messageTarget} onChange={handleMessageTargetChange}>\n        {users.filter(({ user }) => user !== mySocket.id).concat({ anonId: 0, user: 0 }).map(({ user, anonId }, idx) => <option value={anonId} key={anonId}>{anonId > 0 ? `Stranger ${anonId}` : 'Everyone!!'}</option>)}\n      </select>\n      <input\n        type='text'\n        onChange={e => set_message(e.target.value)}\n        value={message}\n        onKeyPress={sendNewMessage}\n        placeholder='type and press Enter to send!'\n      />\n\n    </div>\n  );\n}\n\nexport default withRouter(Chat);\n","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/RoomsList.js",[],"/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/RoomsListItem.js",["69"],"import React, { useContext } from 'react';\nimport SocketContext from '../context/SocketContext';\nimport { withRouter } from 'react-router-dom'\nimport generateChatUrl from '../utils/generateChatUrl';\n\nconst RoomsListItem = (props) => {\n  const { history } = props\n  const { host, roomName, roomId, users, capacity, topic, ...rest } = props.roomInfo\n  const mySocket = useContext(SocketContext)\n  const handleRoomJoin = (e) => {\n    e.preventDefault()\n    mySocket.emit('joinRoom', { host, roomId }, (err, data) => {\n      console.log(props)\n      if (err) return console.log(err)\n      const { anonId } = data\n      history.push(generateChatUrl(host, roomId, anonId))\n    })\n  }\n  return (\n    <div style={{ border: '1px solid red', marginBottom: '10px' }}>\n      <h1>Room name: {roomName}</h1>\n      <h1>Room topic: {topic}</h1>\n      <h1>capacity: {`${users.length}/${capacity}`}</h1>\n      <button onClick={handleRoomJoin} disabled={!(users.length < capacity)}>Join</button>\n    </div>\n  )\n}\n\nexport default withRouter(RoomsListItem);\n","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/MessagesList.js",["70","71","72"],"import React, { useContext, useEffect, useRef } from 'react';\nimport SocketContext from '../context/SocketContext';\nimport MessagesListItem from './MessagesListItem';\n\nconst MessagesList = (props) => {\n  const { messages } = props\n  const mySocket = useContext(SocketContext)\n  const scrollHelperRef = useRef(null)\n  useEffect(() => {\n    scrollHelperRef.current.scrollIntoView({ behavior: \"smooth\" })\n  }, [messages])\n\n  return (\n    <div style={{ height: '90vh', overflow: 'scroll' }}>\n      {messages.map((messageInfo) => {\n        //{userId === mySocket.id && type === 'ADMIN' ? content.includes('left') ? 'You\\'ve just left this room!' : 'You\\'ve just joined this room' : type === 'ADMIN' ? content : userId === mySocket.id ? `You: ${content}` : `Stranger ${anonId}: ${content}`}\n        const { type, host, roomId, anonId, userId, timestamp, message: content, targetUser } = messageInfo\n        let modifiedMsg = ''\n        if (userId === mySocket.id && type === 'ADMIN') {\n          modifiedMsg = content.includes('left') ? 'You\\'ve just left this room!' : 'You\\'ve just joined this room'\n        } else if (type === 'ADMIN') {\n          modifiedMsg = content\n        }\n        if (type === 'USER') {\n          modifiedMsg = userId === mySocket.id ? `You: ${content}` : `Stranger ${anonId}: ${content}`\n        }\n\n        if (type === 'PEER') {\n          const { user: otherUser, anonId: otherAnonId } = targetUser\n          if (userId === mySocket.id) modifiedMsg = `You to Stranger ${otherAnonId}: ${content}`\n          if (mySocket.id === otherUser) modifiedMsg = `Stranger ${anonId} to You: ${content}`\n        }\n\n        return { ...messageInfo, message: modifiedMsg }\n      }).map((message, idx) => <MessagesListItem message={message} key={idx} />)}\n      <div ref={scrollHelperRef} ></div>\n    </div>\n  );\n}\n\nexport default MessagesList;\n","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/MessagesListItem.js",["73","74","75","76","77","78","79"],"import React, { useContext } from 'react';\nimport SocketContext from '../context/SocketContext';\n\n\n//if returned userId is the same as mySocket.id then for the admin messages, override how they're written.\nconst MessagesListItem = (props) => {\n  const mySocket = useContext(SocketContext)\n  const { message } = props\n  const { type, host, roomId, anonId, userId, timestamp, message: content } = message\n\n  return (\n    <div style={{ border: '1px solid blue', marginBottom: '20px' }}>\n\n\n\n      <h1>{content}</h1>\n      {/* <pre>\n        {JSON.stringify(message, null, 2)}\n      </pre> */}\n    </div>\n  );\n}\n\nexport default MessagesListItem;\n","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/utils/generateChatUrl.js",["80"],"export default (host, roomId, anonId) => `/chat?host=${host}&room=${roomId}&anon=${anonId}`","/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/TypersList.js",[],"/home/asdf_wsl2/Documents/hr/mvp_chat_app_CRA/client/src/components/TypersListItem.js",[],["81","82"],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":10,"column":1,"nodeType":"89","endLine":36,"endColumn":2},{"ruleId":"90","severity":1,"message":"91","line":7,"column":8,"nodeType":"92","messageId":"93","endLine":7,"endColumn":15},{"ruleId":"94","severity":1,"message":"95","line":35,"column":6,"nodeType":"96","endLine":35,"endColumn":8,"suggestions":"97"},{"ruleId":"90","severity":1,"message":"98","line":21,"column":25,"nodeType":"92","messageId":"93","endLine":21,"endColumn":31},{"ruleId":"90","severity":1,"message":"99","line":21,"column":39,"nodeType":"92","messageId":"93","endLine":21,"endColumn":45},{"ruleId":"100","severity":1,"message":"101","line":47,"column":34,"nodeType":"102","messageId":"103","endLine":47,"endColumn":36},{"ruleId":"94","severity":1,"message":"104","line":71,"column":6,"nodeType":"96","endLine":71,"endColumn":8,"suggestions":"105"},{"ruleId":"100","severity":1,"message":"101","line":80,"column":78,"nodeType":"102","messageId":"103","endLine":80,"endColumn":80},{"ruleId":"90","severity":1,"message":"106","line":8,"column":62,"nodeType":"92","messageId":"93","endLine":8,"endColumn":66},{"ruleId":"90","severity":1,"message":"107","line":17,"column":23,"nodeType":"92","messageId":"93","endLine":17,"endColumn":27},{"ruleId":"90","severity":1,"message":"98","line":17,"column":29,"nodeType":"92","messageId":"93","endLine":17,"endColumn":35},{"ruleId":"90","severity":1,"message":"108","line":17,"column":53,"nodeType":"92","messageId":"93","endLine":17,"endColumn":62},{"ruleId":"90","severity":1,"message":"109","line":7,"column":9,"nodeType":"92","messageId":"93","endLine":7,"endColumn":17},{"ruleId":"90","severity":1,"message":"110","line":9,"column":11,"nodeType":"92","messageId":"93","endLine":9,"endColumn":15},{"ruleId":"90","severity":1,"message":"107","line":9,"column":17,"nodeType":"92","messageId":"93","endLine":9,"endColumn":21},{"ruleId":"90","severity":1,"message":"98","line":9,"column":23,"nodeType":"92","messageId":"93","endLine":9,"endColumn":29},{"ruleId":"90","severity":1,"message":"99","line":9,"column":31,"nodeType":"92","messageId":"93","endLine":9,"endColumn":37},{"ruleId":"90","severity":1,"message":"111","line":9,"column":39,"nodeType":"92","messageId":"93","endLine":9,"endColumn":45},{"ruleId":"90","severity":1,"message":"108","line":9,"column":47,"nodeType":"92","messageId":"93","endLine":9,"endColumn":56},{"ruleId":"87","severity":1,"message":"88","line":1,"column":1,"nodeType":"89","endLine":1,"endColumn":92},{"ruleId":"83","replacedBy":"112"},{"ruleId":"85","replacedBy":"113"},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'produce' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'mySocket' and 'rooms'. Either include them or remove the dependency array.","ArrayExpression",["116"],"'roomId' is assigned a value but never used.","'anonId' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'history', 'location.search', and 'mySocket'. Either include them or remove the dependency array.",["117"],"'rest' is assigned a value but never used.","'host' is assigned a value but never used.","'timestamp' is assigned a value but never used.","'mySocket' is assigned a value but never used.","'type' is assigned a value but never used.","'userId' is assigned a value but never used.",["114"],["115"],"no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [mySocket, rooms]",{"range":"122","text":"123"},"Update the dependencies array to be: [history, location.search, mySocket]",{"range":"124","text":"125"},[1060,1062],"[mySocket, rooms]",[2453,2455],"[history, location.search, mySocket]"]